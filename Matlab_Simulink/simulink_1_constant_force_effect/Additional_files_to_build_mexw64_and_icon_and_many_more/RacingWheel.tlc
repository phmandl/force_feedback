%% File : RacingWheel.tlc
%% Created : Tue Jul 07 21:46:32 2020
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "RacingWheel.cpp".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  RacingWheel "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs


    extern void RacingWheel_Start_wrapper(const real_T *Ts_FF, const int_T p_width0,
			const real_T *Ts_Block, const int_T p_width1);

    extern void RacingWheel_Outputs_wrapper(const real_T *FF,
			boolean_T *gearup,
			boolean_T *geardown,
			boolean_T *ST,
			boolean_T *SE,
			boolean_T *X,
			boolean_T *O,
			boolean_T *Square,
			boolean_T *Triangle,
			boolean_T *L2,
			boolean_T *R2,
			boolean_T *L3,
			boolean_T *R3,
			boolean_T *DPadDown,
			boolean_T *DPadUp,
			boolean_T *DPadLeft,
			boolean_T *DPadRight,
			real_T *throttle,
			real_T *brake,
			real_T *clutch,
			real_T *angle,
			const real_T *Ts_FF, const int_T p_width0,
			const real_T *Ts_Block, const int_T p_width1);

    extern void RacingWheel_Terminate_wrapper(const real_T *Ts_FF, const int_T p_width0,
			const real_T *Ts_Block, const int_T p_width1);

  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  RacingWheel_Start_wrapper(%<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign py6 = LibBlockOutputSignalAddr(6, "", "", 0)
  %assign py7 = LibBlockOutputSignalAddr(7, "", "", 0)
  %assign py8 = LibBlockOutputSignalAddr(8, "", "", 0)
  %assign py9 = LibBlockOutputSignalAddr(9, "", "", 0)
  %assign py10 = LibBlockOutputSignalAddr(10, "", "", 0)
  %assign py11 = LibBlockOutputSignalAddr(11, "", "", 0)
  %assign py12 = LibBlockOutputSignalAddr(12, "", "", 0)
  %assign py13 = LibBlockOutputSignalAddr(13, "", "", 0)
  %assign py14 = LibBlockOutputSignalAddr(14, "", "", 0)
  %assign py15 = LibBlockOutputSignalAddr(15, "", "", 0)
  %assign py16 = LibBlockOutputSignalAddr(16, "", "", 0)
  %assign py17 = LibBlockOutputSignalAddr(17, "", "", 0)
  %assign py18 = LibBlockOutputSignalAddr(18, "", "", 0)
  %assign py19 = LibBlockOutputSignalAddr(19, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  RacingWheel_Outputs_wrapper(%<pu0>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<py7>, %<py8>, %<py9>, %<py10>, %<py11>, %<py12>, %<py13>, %<py14>, %<py15>, %<py16>, %<py17>, %<py18>, %<py19>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
  %%
%endfunction


%% [EOF] RacingWheel.tlc

